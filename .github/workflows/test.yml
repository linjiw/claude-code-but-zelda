name: Cross-Platform Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run with debug logging'
        required: false
        default: false

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip some combinations to save CI minutes
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y alsa-utils pulseaudio ffmpeg
        # Start PulseAudio daemon for testing
        pulseaudio --start || true

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # macOS has afplay built-in, no additional deps needed
        which afplay

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install any Python dependencies if needed
        # pip install -r requirements.txt

    - name: Run cross-platform hook test
      run: |
        echo "Running cross-platform hook test..."
        python test_cross_platform_hook.py || exit 1
      env:
        CI: true
        PYTHONIOENCODING: utf-8

    - name: Run main test suite
      run: |
        echo "Running main test suite..."
        python test_suite.py || exit 1
      env:
        CI: true
        PYTHONIOENCODING: utf-8

    - name: Test hook integration
      run: |
        echo "Running integration tests..."
        python test_integration.py || exit 1
      env:
        CI: true
        PYTHONIOENCODING: utf-8

    - name: Test Zelda system
      run: |
        echo "Running Zelda system tests..."
        python test_zelda_system.py || exit 1
      env:
        CI: true
        PYTHONIOENCODING: utf-8

    - name: Verify sound files
      run: |
        python -c "
        import os
        from pathlib import Path
        sounds_dir = Path('sounds')
        required_sounds = [
            'success.wav', 'error.wav', 'session_start.wav',
            'todo_complete.wav', 'damage.wav', 'warning.wav'
        ]
        missing = []
        for sound in required_sounds:
            if not (sounds_dir / sound).exists():
                missing.append(sound)
        if missing:
            print(f'Missing sound files: {missing}')
            exit(1)
        print(f'All {len(required_sounds)} required sound files present')
        "

    - name: Test NPM package structure
      run: |
        npm pack --dry-run
        # Skip npm test as it's not configured properly yet

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          *.log
          test-results/
        retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
    - name: Check test results
      run: |
        echo "Test job result: ${{ needs.test.result }}"
        echo ""
        echo "## Cross-Platform Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "All platform tests completed successfully."
          exit 0
        elif [ "${{ needs.test.result }}" == "failure" ]; then
          echo "❌ Some tests failed!" >> $GITHUB_STEP_SUMMARY
          echo "Check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
          echo "Some tests failed. Check the logs above."
          exit 1
        else
          echo "⚠️ Tests were cancelled or skipped" >> $GITHUB_STEP_SUMMARY
          echo "Tests did not complete normally."
          exit 1
        fi